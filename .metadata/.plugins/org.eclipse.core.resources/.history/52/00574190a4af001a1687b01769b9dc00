#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"
#include <string.h>

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromText(FILE* pFile , LinkedList* pArrayListEmployee)
{
	int retorno=-1;
	char auxId[4096];
	char auxNombre[4096];
	char auxHorasTrabajadas[4096];
	char auxSueldo[4096];
	Employee* pEmployee;

	if(pFile != NULL && pArrayListEmployee != NULL)
	{
		do
		{
			if(fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",auxId,auxNombre,auxHorasTrabajadas,auxSueldo) == 4) //Leo el contenido del archivo y lo guardo en variables aux.
			{
				pEmployee = employee_newParametrosTxt(auxId,auxNombre,auxHorasTrabajadas,auxSueldo);         //Creo un empleado con los datos que leí.
				if (pEmployee != NULL)
				{
					if(ll_add(pArrayListEmployee,pEmployee)==0)                                              //Agrego a mi Linkedlist el puntero del empleado que creé .
					{
						retorno = 0;
					}
				}
			}
		}while(!feof(pFile));                                                                               //Mientras feof() devuelva 0 significa que hay contenido por leer.
	}
	return retorno;
}

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromBinary(FILE* pFile , LinkedList* pArrayListEmployee)
{
	int retorno = -1;
		Employee* auxPEmployee;
		Employee auxEmployee;
		char auxiliarId[4096];
		char auxiliarNombre[4096];
		char auxiliarHsTrabajadas[4096];
		char auxiliarSueldo[4096];
		int contadorEmployee=0;

		if(pFile != NULL && pArrayListEmployee != NULL)
		{
			if(pFile != NULL)
			{

				do
				{
					if(fread(&auxEmployee,sizeof(Employee),1, pFile)==1)
					{
		                sprintf(auxiliarId, "%d", auxEmployee.id);
		                strcpy(auxiliarNombre, auxEmployee.nombre);
		                sprintf(auxiliarHsTrabajadas, "%d",auxEmployee.horasTrabajadas);
		                sprintf(auxiliarSueldo, "%d", auxEmployee.sueldo);

						if(employee_newParametrosTxt(auxiliarId,auxiliarNombre,auxiliarHsTrabajadas,auxiliarSueldo) >= 0)
						{
							auxPEmployee = (Employee*) employee_newParametrosTxt(auxiliarId,auxiliarNombre,auxiliarHsTrabajadas,auxiliarSueldo);
							if(ll_add(pArrayListEmployee,auxPEmployee)==0)
							{
								retorno = 0;
								contadorEmployee++;
							}

						}
					}
				}while(!feof(pFile));
			}
		}
		printf("Se cargaron %d empleados\n",contadorEmployee);
		return retorno;
}
